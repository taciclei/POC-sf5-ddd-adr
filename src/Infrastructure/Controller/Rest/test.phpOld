<?php
final class Money
{
    const COINS = [10, 5, 2];
    public $coin2 = 0;
    public $coin5 = 0;
    public $coin10 = 0;
    public $reste;
    function calculate(int $input): ?self
    {
        $this->reste = $input;
        foreach (Money::COINS as $coin) {
            $var = 'coin'.$coin;
            $this->$var = intdiv($this->reste , $coin);
            $this->reste = ($input % $coin);
            if (0 !== $this->reste && $coin == 2) {
                return null;
            }
        }
        return $this;
    }
}
$moneyRest = (new Money())->calculate(39);
if(null !== $moneyRest ) {
    echo "PiÃ¨ces de 2 : " . ($moneyRest->coin2) . " Billet de 5 : " . ($moneyRest->coin5) . " Billet de 10 : " . ($moneyRest->coin10). " Reste : " . ($moneyRest->reste);
}

function distance($x1,$y1,$x2,$y2) {
    $distance = sqrt(($y2 - $y1)**2 + ($x2 - $x1)**2);
    return $distance;
}

function check_form($data) {

    $return = [];
    foreach($data as $index => $value) {
        switch($index){
            case 'nom':
                $check = (bool)preg_match('#^[A-Za-z -]*$#', $value, $matches);
                $return['nom']['valide'] = $check;
                if(false === $check) {
                    $return['nom']['message'] = 'nom not valide : '.$value;
                }
                break;
            case 'prenom':
                $check = (bool)preg_match('#^[A-Za-z -]*$#', $value, $matches);
                $return['prenom']['valide'] = $check;
                if(false === $check) {
                    $return['prenom']['message'] = 'prenom not valide : '.$value;
                }
                break;
            case 'CP':
                $check = (bool)($value >= 1000 &&  $value <= 9999);
                $return['CP']['valide'] = $check;
                if(false === $check) {
                    $return['CP']['message'] = 'CP not valide : '.$value;
                }
                break;
            case 'naissance':
                $dates = explode('/', $value);
                $check = (bool)checkdate($dates[1], $dates[0], $dates[2]);
                $return['naissance']['valide'] = $check;
                if(false === $check) {
                    $return['naissance']['message'] = 'naissance not valide : '.$value;
                }
                break;
            case 'banque':
                $check = (bool)preg_match('#^BE[0-9]{2}( ?[0-9]{4}){3}$#', $value, $matches);
                $return['banque']['valide'] = $check;
                if(false === $check) {
                    $return['banque']['message'] = 'banque not valide : '.$value;
                }
                break;

        }
    }
    return $return;

}

function isPrime($number) {
    for ($i = 2; $i < $number; $i++) {
        if ($number % $i == 0) {
            return false;
        }
    }

    return true;
}

function premiers($n) {
    $premiers = [];

    for ($i = 3; $i < $n; $i++) {
        if (isPrime($i)) {
            $premiers[] = $i;
        }
    }

    if(!empty($premiers)) {
        return $premiers;
    }

}
